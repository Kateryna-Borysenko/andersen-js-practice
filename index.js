//! LESSON 1

let someString = 'String';
// console.log(someString[1]); //t
someString[1] = 'w';
// console.log(someString[1]); //t

//! LESSON 2 
//–ø—Ä–æ–±–ª–µ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
const person = {
  firstName: 'Roman',
  lastName: 'Alexanov'
};

const personCopy = Object.assign({}, person) //–¥–µ–ª–∞–µ–º –∫–æ–ø–∏—é, —Ç—É—Ç –≤—Å—ë ok —Ç–∫ –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–µ–π
// console.log('üçí personCopy', personCopy)

//—Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç —Å –æ–±—ä–µ–∫—Ç–æ–º –≤–Ω—É—Ç—Ä–∏
const personWithPassport = {
  firstName: 'Roman',
  lastName: 'Alexanov',
  passport: {
    series: 'MC',
    number: '1234546'
  }
};
//–±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–µ –≥–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—ç—Ç–æ–º—É –∏–∑–º–µ–Ω—è—Ç—Å—è –≤ –æ–±–æ–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö 
const personWithPassportCopy = Object.assign({}, personWithPassport)
// –Ω–µ –≥–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ 
// console.log('üçí personWithPassport', personWithPassport)
// console.log('üçí personWithPassportCopy', personWithPassportCopy)
//! –µ—Å–ª–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –≤ –æ–±–æ–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
personWithPassportCopy.passport.series = 'FN';
// console.log('üçí personWithPassport', personWithPassport)
// console.log('üçí personWithPassportCopy', personWithPassportCopy)

//! Object.is()
const obj = { message: 'hello' };
const newObj = obj;
const anotherObj = { message: 'hello' };
// console.log(obj === obj); //true
// console.log(obj === anotherObj); //false
// console.log(Object.is(obj, anotherObj)); //false
// console.log(Object.is(obj, newObj)); //true //–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —ç—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç


// –ü–†–ò–ú–ï–† –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–û–ò–°–ö–ê
//–ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
//–∫–∞–∫ —Å –ª–∏–Ω–µ–π–Ω–æ–π –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
const customerList = [
  { firstName: 'Nick', secondName: 'McGillan', age: 35, phoneNumber: '+1333777888' },
  { firstName: 'Brian', secondName: 'Boyenger', age: 35, phoneNumber: '+1555666777' },
];

//—Ä–µ—à–µ–Ω–∏–µ
const mappedCustomerList = customerList.reduce((acc, item) => {
  acc[item.firstName + item.secondName] = item;
  return acc;
}, {});

// console.log(mappedCustomerList);

//!–ü—Ä–∏–º–∏—Ç–∏–≤ ‚Äú–∫–∞–∫ –æ–±—ä–µ–∫—Ç‚Äù (–∞–≤—Ç–æ–±–æ–∫—Å–∏–Ω–≥)
//	–ê–≤—Ç–æ–±–æ–∫—Å–∏–Ω–≥ - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ö–∞–Ω–∏–∑–º JavaScript, —Å—É—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –æ–±—ë—Ä—Ç–∫–µ –ø—Ä–∏–º–∏—Ç–∏–≤–∞ –≤ –æ–±—ä–µ–∫—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ (Number –¥–ª—è —á–∏—Å–µ–ª, String –¥–ª—è —Å—Ç—Ä–æ–∫) –≤ –º–æ–º–µ–Ω—Ç –ø–æ–ø—ã—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ ‚Äú–µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Å–≤–æ–π—Å—Ç–≤–∞–º –∏–ª–∏ –º–µ—Ç–æ–¥–∞–º‚Äù. –í—Å—è–∫–∏–π —Ä–∞–∑, –æ–±—Ä–∞—â–∞—è—Å—å –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º/–º–µ—Ç–æ–¥–∞–º –Ω–∞—à–µ–≥–æ –ø—Ä–∏–º–∏—Ç–∏–≤–∞, –º—ã –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏/–º–µ—Ç–æ–¥–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞-–æ–±—ë—Ä—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç—Å—è –ª–∏—à—å –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∏ —Ç—É—Ç –∂–µ —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è.


//! –º–∞—Å—Å–∏–≤ - —ç—Ç–æ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö.
//–±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (–¥–≤–æ–∏—á–Ω—ã–π –ø–æ–∏—Å–∫) - –≤–∞–∂–Ω–æ –º–∞—Å—Å–∏–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
//–≤–∏–¥–µ–æ 0:56 
//–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –º–∞—Å—Å–∏–≤
// –±–µ—Ä—ë–º –∑–∞ –±–∞–∑—É –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞ –∏ –¥–µ–ª–∏–º –ø–æ–ø–æ–ª–∞–º , –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–æ–º–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ –∏ –æ—Ç—Å–µ–∫–∞–µ–º –Ω–µ –Ω—É–∂–Ω—É—é –ø–æ–ª–æ–≤–∏–Ω—É –º–∞—Å—Å–∏–≤–∞
//–ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–∞—à –º–∞—Å—Å–∏–≤ —É–∫–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ –¥–≤–∞ —Ä–∞–∑–∞ 
//—Ç–µ–º —Å–∞–º—ã–º –ø–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é 
const sortedArray = [1, 5, 6, 7, 8, 20, 25, 26, 30, 35, 40, 50];

const binarySearc = (array, serchedValue) => {
  let start = 0;
  let end = array.length;
  let base = Math.floor((start + end) / 2);
  let step = 0;

  for (let i = 0; i < array.length; i++) {
    if (array[base] !== serchedValue) {
      if (serchedValue < array[base]) {
        end = base;
      } else {
        start = base;
      }
      base = Math.floor((start + end) / 2);
      step++;
    };

    if (array[base] === serchedValue) return `Found ${serchedValue} in ${step} steps`;
  }

  return 'Nothing found';
}

console.log(binarySearc(sortedArray, 125));

//! LESSON 3

const counter = function (sumValue) {
  let count = 0;
  return function () {
    console.log(count += sumValue);
  };
};

const addFive = counter(5);
const addFive2 = counter(5);
const addSeven = counter(7);

addFive();
addFive();
addFive();
addFive();

addSeven();

addFive2();

//! LESSON 8
// console.log(typeof typeof (1 / 0)) –≤–µ—Ä–Ω—ë—Ç —Å—Ç—Ä–æ–∫—É


//–∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤
Array.prototype.duplicate = function () {
  return [...this, ...this];
}
// console.log([1, 2, 3, 4, 5].duplicate()); // [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]

let arr = [1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 7];

//–ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
function unique(array) {
  return [...new Set(arr)];
}
// console.log(unique(arr)); // 


//–≤—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –≤ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–∞—Ö –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π - —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ 
let arr1 = [0, 2, 4, 6, 8, 8, 7, 7];
let arr2 = [1, 2, 3, 4, 5, 6, 8, 8];

let duplicateValues = [...new Set(arr1)].filter(item => arr2.includes(item))
// console.log(duplicateValues);


//—Å–æ *
//—Ñ-—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –≤—Ä–µ–º–µ–Ω–∏
function when(delay) {
  return new Promise((res, rej) => {
    setTimeout(res, delay)
  })
}

// when(2000).then(() => console.log('finish'));


// –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ This
const shape = {
  radius: 10,
  diameter() {
    return this.radius * 2;
  },
  perimeter: () => 2 * Math.PI * this.radius,
}

// console.log(shape.diameter()); // 20

// console.log(shape.perimeter()); // NaN - –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∞ —Å–≤–æ–π—Å—Ç–≤–∞ radius –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ –Ω–µ—Ç, –ø–æ—ç—Ç–æ–º—É –≤–µ—Ä–Ω—ë—Ç undefined //perimeter: () => 2 * Math.PI * undefined,

const newDiameter = shape.diameter;

// console.log(newDiameter()); // NaN - –ø–æ—Ç–µ—Ä—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ / –∫–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç - bind


// TDZ - –∑–∞–¥–∞—á–∞ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ä—Ç–≤—É—é –∑–æ–Ω—É

var a = 5;

function foo(a) {
  a += a;
}

foo(10);
// console.log(a); // 5



// –∑–∞–¥–∞—á–∞  Promise chaining

// Promise.reject('a') //a
//  .catch(p => p + 'b')//b
//  .catch(p => p + 'c')
//  .then(p => p + 'd') //d
//  .finally(p => p + 'e')
//  .then(p => console.log(p)); // abd - –ø—Ä–æ–º–∏—Å –æ–¥–∏–Ω —Ä–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–µ—Ä–≤—ã–π catch –≤—Ç–æ—Ä–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∏–∑ then –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç finally –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π then –≤–µ—Ä–Ω—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–≥–æ then 



//–∑–∞–¥–∞—á–∞ –ø–æ—Å–ª–æ–∂–Ω–µ–µ 
Promise.resolve(11)
  .then(
    val => console.log('then', val), // then, 11 - –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
    err => console.log('catch', err)
  )
  .then(
    null, //–Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    err => console.log('catch', err)
  )
  .catch(
    err => console.log('catch', err)
  )
  .then(
    () => Promise.reject(22)
  )
  .catch(
    null
  )
  .then(
    val => console.log('then', val),
    null
  )
  .finally(
    val => console.log('finally', val), // finally, undefined
  )
  .catch(
    val => console.log('catch', val) // catch, 22
  )
  .finally(
    () => Promise.reject(33)
  )
  .then(
    val => console.log('then', val),
    err => console.log('catch', err) // catch 33
  )
  .catch(
    val => console.log('then', val),
    err => console.log('catch', err)
  );


// –ú—É—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 
let someString = 'String';
// console.log(someString[1]); //t
someString[1] = 'w';
        // console.log(someString[1]); //t